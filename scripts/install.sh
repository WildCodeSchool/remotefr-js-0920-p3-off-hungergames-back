#!/bin/bash

# --- PLEASE adjust the params in this section -----------------------

# Unprivileged Unix account's plain-text password
UNIXUSERPASS=NodejsAccountPasswd

# Unprivileged PostgreSQL role's plain-text password
PGPASS=FeedmeRolePasswd

# Robotoff instance URL
# (the 2nd one, used for dev, will be shut down in Feb. 21)
# ROBOTOFF_BASE_URL=https://robotoff.openfoodfacts.org
ROBOTOFF_BASE_URL=https://robotoff.wild31.com

# Public URL of the app (no trailing slash!)
# (the 2nd one is for tests with a VM on a LAN)
# PUBLIC_URL=https://feedme.openfoodfacts.org
PUBLIC_URL=http://192.168.1.33

# GitHub front&back repos
GITHUB_REPO_FRONT=https://github.com/WildCodeSchool/remotefr-js-0920-p3-off-hungergames-front.git
GITHUB_REPO_BACK=https://github.com/WildCodeSchool/remotefr-js-0920-p3-off-hungergames-back.git

# --- END of params section ------------------------------------------


# Set variables used during the script
set_variables() {
  # Unix account username/pass
  UNIXUSERNAME=nodejs
  UNIXUSERHASH=$(openssl passwd -crypt $UNIXUSERPASS)
  # Pg account username/pass
  PGUSER=feedme
  PGPASSWORD=$PGPASS
  # In case useradd isn't found (e.g. running su instead of su -)
  PATH=/sbin:$PATH
}


# Install modules we'll need
install_base_packages() {
  apt-get update
  apt-get install -y sudo curl git openssl postgresql nginx
}


# Create non-privileged account
create_regular_user() {
  useradd -d /home/$UNIXUSERNAME -m -p $UNIXUSERHASH -s /bin/bash $UNIXUSERNAME
  chown $UNIXUSERNAME:$UNIXUSERNAME hg-env-*
  mv hg-env-* /home/$UNIXUSERNAME
}


# Install Node.js from Nodesource official packages
install_nodejs() {
  curl -sL https://deb.nodesource.com/setup_14.x | bash -
  apt-get install -y nodejs
  npm i -g pm2
}


# Setup PostgreSQL
setup_pg() {
  # Create feedme DB owned by feedme
  sudo -u postgres psql -c "CREATE ROLE $PGUSER WITH PASSWORD '$PGPASSWORD';"
  sudo -u postgres psql -c "ALTER ROLE $PGUSER WITH LOGIN;"
  sudo -u postgres psql -c "CREATE DATABASE feedme OWNER $PGUSER;"

  # Will work with default pg_hba.conf
  sed -i "/^local.*all.*all/ilocal\tall\t$PGUSER\t\t\t\t\tpassword" /etc/postgresql/11/main/pg_hba.conf
  systemctl restart postgresql
}


# Write front-end app env file (will be renamed later)
write_front_env_file() {
  tee feedme-env-front <<EOF
VUE_APP_BACK_API_NODE={PUBLIC_URL}/robotoff
VUE_APP_WEBSITE_URL={PUBLIC_URL}
EOF
}


# Write back-end app env file (will be renamed later)
write_back_env_file() {
  tee feedme-env-back <<EOF
PORT=5000
ALLOWED_ORIGINS=
ROBOTOFF_API_URL={ROBOTOFF_BASE_URL}/api/v1
OFF_API_URL=https://world.openfoodfacts.org/api/v0
OFF_IMAGE_URL=https://static.openfoodfacts.org/images/products
DB_HOST=localhost
DB_USER=feedme
DB_PASSWORD={PGPASSWORD}
DB_DATABASE=feedme
EOF
}


# Create apps clone/setup/run script, to be run
# as non-privileged user
write_apps_install_script() {
  tee installapps.sh <<EOF
#!/bin/bash
cd /home/$UNIXUSERNAME
git clone $GITHUB_REPO_FRONT feedme-front
git clone $GITHUB_REPO_BACK feedme-back
cd feedme-front
mv ../feedme-env-front .env.local
sed -i -e "s/{PUBLIC_URL}/$PUBLIC_URL/g" .env
npm install
npm run build
cd ../feedme-back

# TEMP
git checkout debian-deployment

npm install
mv ../feedme-env-back .env
sed -i -e "s/{ROBOTOFF_BASE_URL}/$ROBOTOFF_BASE_URL/g" .env
sed -i -e "s/{PGPASSWORD}/$PGPASSWORD/g" .env
echo "localhost:5432:feedme:feedme:$PGPASSWORD" > /home/$UNIXUSERNAME/.pgpass
chmod 600 /home/$UNIXUSERNAME/.pgpass
psql -U feedme -d feedme < /home/$UNIXUSERNAME/feedme-back/database/schema.sql
rm /home/$UNIXUSERNAME/.pgpass
# Start backend in production mode
pm2 start ecosystem.config.js --env production
# Generate startup script
pm2 startup | tee | tail -n 1 > feedme-startup.sh
# Dump running services so they are restored by startup script
pm2 save
EOF
}


# Run install script as non-privileged user
run_apps_install_script() {
  chown $UNIXUSERNAME:$UNIXUSERNAME installapps.sh
  chmod +x installapps.sh
  mv installapps.sh /home/$UNIXUSERNAME/
  sudo -u $UNIXUSERNAME /home/$UNIXUSERNAME/installapps.sh
  rm installapps.sh

  # Run the startup script generated by pm2 (needs sudo) & rm it
  bash /home/$UNIXUSERNAME/feedme-startup.sh
  rm /home/$UNIXUSERNAME/feedme-startup.sh
}

# Serve with Nginx
# All requests to /robotoff/* will be proxied to the Node backend
# All the rest are static assets, with /home/nodejs/feedme-front/dist as webroot
setup_nginx() {
  cp feedme-nginx-vhost.conf /etc/nginx/sites-available/feedme
  ln -s /etc/nginx/sites-available/feedme /etc/nginx/sites-enabled/feedme
  rm /etc/nginx/sites-enabled/default
  systemctl reload nginx
}

# Check status by running pm2 status
# and requesting front-end & back-end URLs
status_check() {
  echo "Almost done! Checking status..."
  echo "pm2 status should show off-feedme-api app with green status (online)"
  sudo -u nodejs pm2 status

  echo "Requesting front-end app's URL..."
  echo "should show a line containing <script> and <noscript> tags"
  curl http://localhost | tail -n 1

  echo "Requesting back-end app's root URL..."
  echo "should show the message: Robotoff !"
  curl http://localhost/robotoff && echo

  echo "Done!"
}

# Run all functions
set_variables
install_base_packages
create_regular_user
install_nodejs
setup_pg
write_front_env_file
write_back_env_file
write_apps_install_script
run_apps_install_script
setup_nginx
status_check
